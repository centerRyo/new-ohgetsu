name: Deploy to Sakra Cloud

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    env:
      WEB_IMAGE_NAME: ohgetsu-web
      SERVER_IMAGE_NAME: ohgetsu-server
      REGISTRY: ohgetsu.sakuracr.jp

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # tagを取得
      - name: Set tag to environment variables
        id: set-tag
        run: echo ::set-output name=version::${GITHUB_REF#refs/*/}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Sakra Cloud Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.SAKURA_CLOUD_USERNAME }}
          password: ${{ secrets.SAKURA_CLOUD_PASSWORD }}

      - name: Build and push web
        uses: docker/build-push-action@v2
        with:
          context: ./web
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ steps.set-tag.outputs.version }}

      - name: Build and push server
        uses: docker/build-push-action@v2
        with:
          context: ./server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:${{ steps.set-tag.outputs.version }}

      # - name: Add SSH host key to known_hosts
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.SAKURA_CLOUD_SSH_KEY }}" > ssh_key.pem
      #     chmod 600 ssh_key.pem
      #     ssh-keyscan -H ${{ secrets.SAKURA_CLOUD_SSH_HOST }} >> ~/.ssh/known_hosts

      # - name: Upload server/prisma/.env to sakura cloud
      #   run: |
      #     scp -i ssh_key.pem -o StrictHostKeyChecking=yes ${{ secrets.SAKURA_CLOUD_SSH_USERNAME}}@${{ secrets.SAKURA_CLOUD_SSH_HOST }} 'mkdir -p /home/ohgetsu/server/prisma'
      #     scp -i ssh_key.pem -o StrictHostKeyChecking=yes server/prisma/.env ${{ secrets.SAKURA_CLOUD_SSH_USERNAME }}@${{ secrets.SAKURA_CLOUD_SSH_HOST }}:/home/ohgetsu/server/prisma/.env

      - name: Execute remote commands via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SAKURA_CLOUD_SSH_HOST }}
          username: ${{ secrets.SAKURA_CLOUD_SSH_USERNAME }}
          key: ${{ secrets.SAKURA_CLOUD_SSH_KEY }}
          script: |
            # Pull the latest images
            docker pull ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }};latest
            docker pull ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }};latest

            # Create Docker network if not exists
            docker network inspect ohgetsu_network > /dev/null 2>&1 || docker network create ohgetsu_network

            # Run PostgreSQL container
            docker rm -f ohgetsu-db || true
            docker run -d --name ohgetsu-db --network ohgetsu_network \
              -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=ohgetsu \
              -p 5432:5432 postgres:latest

            # Run server container
            docker rm -f ohgetsu-server || true
            docker run -d --name ohgetsu-server --network ohgetsu_network \
              -e DATABASE_URL="postgres://postgres:postgres@ohgetsu-db:5432/ohgetsu" \
              -p 8080:8080 ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME }}:latest

            # Run web container
            docker rm -f ohgetsu-web || true
            docker run -d --name ohgetsu-web --network ohgetsu_network \
              -p 3000:3000 ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:latest
